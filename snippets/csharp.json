{
	"Creates a HelloWorld sample":{
		"prefix": "#helloworld",
		"body": [
			"using System;\r\n",
			"namespace ConsoleApp",
			"{",
			"\tpublic class Program",
			"\t{",
			"\t\tpublic static void Main(string[] args)",
			"\t\t{",
			"\t\t\tConsole.WriteLine(\"Hello World!\");",
			"\t\t}",
			"\t}",
			"}"
			],
		"description": "Creates a HelloWorld sample"
	},
	"Creates a destructor for the containing class":{
		"prefix": "~",
		"body": [
			"~${1:Program}()",
			"{",
			"\t$0",
			"}"
			],
		"description": "Creates a destructor for the containing class"
	},
	"Creates a call to Clear":{
		"prefix": "cclear",
		"body": [
			"Console.Clear();",
			"$0"
		],
		"description": "Creates a call to Clear"
	},
	"General output to console":{
		"prefix": "cgo",
		"body": [
			"Console.WriteLine(\"Console app started\");\r\n",
			"$0",
			"Console.WriteLine(\"Press any key to exit...\");",
			"Console.ReadKey(true);"
		],
		"description": "General output to console"
	},
	"Creates an abstract class declaration":{
		"prefix": "classa",
		"body": [
			"public abstract class ${1:MyClass}",
			"{",
			"\t$0",
			"}"
			],
		"description": "Creates an abstract class declaration"
	},
	"Creates a disposable class":{
		"prefix": "classd",
		"body": [
			"public class ${1:MyClass} : IDisposable",
			"{",
			"",
			"\tpublic void Dispose()",
			"\t{",
			"\t\tGC.SuppressFinalize(this);",
			"\t}",
			"",
			"\t$0",
			"}"
			],
		"description": "Creates a disposable class"
	},
	"Creates a constant":{
		"prefix": "const",
		"body": [
			"${1:public} const ${2:string} ${3:CONSTANT_NAME} = \"${4:value}\";",
			"$0"
			],
		"description": "Creates a constant"
	},
	"Creates a call to ReadLine":{
		"prefix": "cr",
		"body": [
			"Console.ReadLine();",
			"$0"
			],
		"description": "Creates a call to ReadLine"
	},
	"Creates a new instance of the Guid structure":{
		"prefix": "guid",
		"body": [
			"Guid ${1:guid} = Guid.NewGuid();",
			"$0"
			],
		"description": "Creates a new instance of the Guid structure"
	},
	"Creates as string, a new instance of the Guid structure without hyphens":{
		"prefix": "guidn",
		"body": [
			"string ${1:guid} = Guid.NewGuid().ToString(\"N\");",
			"$0"
			],
		"description": "Creates as string, a new instance of the Guid structure without hyphens"
	},
	"Creates an immutable object":{
		"prefix": "immutable",
		"body": [
			"${1:public} class ${2:ImmutableObject}",
			"{",
			"\tprivate readonly ${3:string} ${4:_name};",
			"\tpublic $3 ${5:Name} => $4",
			"",
			"\tpublic $2($3 ${6:name})",
			"\t{",
			"\t\t$4 = $6;",
			"\t}",
			"}"
			],
		"description": "Creates an immutable object"
	},
	"Creates a LINQ Distinct sentence":{
		"prefix": "linq_distinct",
		"body": [
			"${1:var} ${2:data} = (from ${3:item} in ${4:collection}",
			"\t\t\tselect $3).Distinct()"
			],
		"description": "Creates a LINQ Distinct sentence"
	},
	"Creates a LINQ Where sentence":{
		"prefix": "linq_where",
		"body": [
			"${1:var} ${2:data} = from ${3:item} in ${4:collection}",
			"\t\t\twhere $3.${5:FieldName}.${6:Contains}(\"${7:Text}\")",
			"\t\t\tselect $3;"
			],
		"description": "Creates a LINQ Where sentence"
	},
	"Creates an immutable property": {
		"prefix": "propi",
		"body": [
			"private readonly ${1:string} ${2:_name};",
			"",
			"public $1 ${3:Name} => $2;",
			"$0"
			],
		"description": "Creates an immutable property"
	},
	"Creates a public string method declaration": {
		"prefix": "pum",
		"body": [
			"public ${1:string} ${2:Method}(${3:string} ${4:parameter})",
			"{",
			"\t$0",
			"\treturn System.NotImplementedException;",
			"}"
			],
		"description": "Creates a public string method declaration"
	},
	"Creates a public void method declaration": {
		"prefix": "pvm",
		"body": [
			"public void ${1:Method}(${2:string} ${3:parameter})",
			"{",
			"\t$0",
			"}"
			],
		"description": "Creates a public void method declaration"
	},
	"Creates a singleton class": {
		"prefix": "singleton",
		"body": [
			"public sealed class ${1:MyClass}",
			"{",
			"\tprivate static volatile I${2:MyObject} instance;",
			"\tprivate static Object syncRootObject = new Object();",
			"",
			"\tpublic static I${2} Instance",
			"\t{",
			"\t\tget",
			"\t\t{",
			"\t\t\tif (instance == null)",
			"\t\t\t{",
			"\t\t\t\tlock (syncRooObject)",
			"\t\t\t\t{",
			"\t\t\t\t\tif (instance == null)",
			"\t\t\t\t\t{",
			"\t\t\t\t\t\tinstance = new $0${3:MyObject}();",
			"\t\t\t\t\t}",
			"\t\t\t\t}",
			"\t\t\t}",
			"\t\t\treturn instance;",
			"\t\t}",
			"\t}",
			"}"
			],
		"description": "Creates a singleton class"
	},
	"Creates a singleton class with System.Lazy<T>": {
		"prefix": "singletonl",
		"body": [
			"public sealed class ${1:MyClass} : I${2:MyObject}",
			"{",
			"\tprivate static readonly Lazy<I${2}> _instance = new Lazy<I${2}>(() => new ${1}());",
			"",
			"\tpublic static I${2} Instance { get { return _instance.Value; } }",
			"\t",
			"\tprivate ${1}()",
			"\t{",
			"\t}",
			"}"
			],
		"description": "Creates a singleton class with System.Lazy<T>"
	},
	"Creates a singleton class as thread-safe without using locks": {
		"prefix": "singletonts",
		"body": [
			"public sealed class ${1:MyClass} : I${2:MyObject}",
			"{",
			"\tprivate static readonly I${2} _instance = new ${1}();",
			"",
			"\tstatic ${1}() {}",
			"",
			"\tprivate ${1}() {}",
			"",
			"\tpublic static I${2} Instance { get { return _instance; } }",
			"\t",
			"}"
			],
		"description": "Creates a singleton class as thread-safe without using locks"
	},
	"csproj Generator for .NET Core 1.0":{
		"prefix": "csproj_1.0",
		"body": [
			"<Project Sdk=\"Microsoft.NET.Sdk\">",
			"\t<PropertyGroup>",
			"\t\t<OutputType>Exe</OutputType>",
			"\t\t<TargetFramework>netcoreapp1.0</TargetFramework>",
			"\t</PropertyGroup>",
			"</Project>"
		],
		"description": "csproj Generator for .NET Core 1.0"
	},
	"csproj Generator for .NET Core 1.1":{
		"prefix": "csproj_1.1",
		"body": [
			"<Project Sdk=\"Microsoft.NET.Sdk\">",
			"\t<PropertyGroup>",
			"\t\t<OutputType>Exe</OutputType>",
			"\t\t<TargetFramework>netcoreapp1.1</TargetFramework>",
			"\t</PropertyGroup>",
			"</Project>"
		],
		"description": "csproj Generator for .NET Core 1.1"
	},
	"csproj Generator for .NET Core 2.0":{
		"prefix": "csproj_2.0",
		"body": [
			"<Project Sdk=\"Microsoft.NET.Sdk\">",
			"\t<PropertyGroup>",
			"\t\t<OutputType>Exe</OutputType>",
			"\t\t<TargetFramework>netcoreapp2.0</TargetFramework>",
			"\t</PropertyGroup>",
			"</Project>"
		],
		"description": "csproj Generator for .NET Core 2.0"
	},
	"sln Generator for Visual Studio 2017 (.NET Core and ASP.NET Core)":{
		"prefix": "sln",
		"body": [
			"Microsoft Visual Studio Solution File, Format Version 12.00",
			"# Visual Studio 15",
			"VisualStudioVersion = 15.0.26124.0",
			"MinimumVisualStudioVersion = 15.0.26124.0",
			"Project(\"{${1:FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}}\") = \"${2:SolutionName}\", \"$2\\\\${3:ProjectName}.csproj\", \"{${4:3E6CAA7F-C72A-428D-91C8-74ADBD56D3CA}}\"",
			"EndProject",
			"Global",
			"\tGlobalSection(SolutionConfigurationPlatforms) = preSolution",
			"\t\tDebug|Any CPU = Debug|Any CPU",
			"\t\tDebug|x64 = Debug|x64",
			"\t\tDebug|x86 = Debug|x86",
			"\t\tRelease|Any CPU = Release|Any CPU",
			"\t\tRelease|x64 = Release|x64",
			"\t\tRelease|x86 = Release|x86",
			"\tEndGlobalSection",
			"\tGlobalSection(SolutionProperties) = preSolution",
			"\t\tHideSolutionNode = FALSE",
			"\tEndGlobalSection",
			"EndGlobal"
		],
		"description": "sln Generator for Visual Studio 2017 (.NET Core and ASP.NET Core)"
	},
	"Xml Comment - <c> Gives you a way to indicate that text within a description should be marked as code":{
		"prefix": "xml_<c>",
		"body": [
			"/// <c>${1:text}</c>"
		],
		"description": "Xml Comment - <c> Gives you a way to indicate that text within a description should be marked as code"
	},
	"Xml Comment - <code> Gives you a way to indicate multiple lines as code. Use <c> to indicate that text within a description should be marked as code":{
		"prefix": "xml_<code>",
		"body": [
			"/// <code>",
			"/// ${1:content}",
			"/// </code>"
		],
		"description": "Xml Comment - <code> Gives you a way to indicate multiple lines as code. Use <c> to indicate that text within a description should be marked as code"
	},
	"Xml Comment - <example> Lets you specify an example of how to use a method or other library member":{
		"prefix": "xml_<example>",
		"body": [
			"/// <example>",
			"/// ${1:description}",
			"/// </example>"
		],
		"description": "Xml Comment - <example> Lets you specify an example of how to use a method or other library member"
	},
	"Xml Comment - <exception> Lets you specify which exceptions can be thrown":{
		"prefix": "xml_<exception>",
		"body": [
			"/// <exception cref=\"${1:member}\">${2:description}</exception>"
		],
		"description": "Xml Comment - <exception> Lets you specify which exceptions can be thrown"
	},
	"Xml Comment - <include> Lets you refer to comments in another file that describe the types and members in your source code":{
		"prefix": "xml_<include>",
		"body": [
			"/// <include file='${1:filename}' path='${2:tagpath}[@name=\"${3:id}\"]' />"
		],
		"description": "Xml Comment - <include> Lets you refer to comments in another file that describe the types and members in your source code"
	},
	"Xml Comment - <list> A list or table can have as many <item> blocks as needed":{
		"prefix": "xml_<list>",
		"body": [
			"/// <list type=\"bulltet\">",
			"///     <listheader>",
			"///        <term>${1:term}</term>",
			"///        <description>${2:description}</description>",
			"///     </listheader>",
			"///     <item>",
			"///        <term>${3:term}</term>",
			"///        <description>${4:description}</description>",
			"///     </item>",
			"/// </list>"
		],
		"description": "Xml Comment - <list> A list or table can have as many <item> blocks as needed"
	},
	"Xml Comment - <para> Is for use inside a tag, such as <summary>, <remarks>, or <returns>, and lets you add structure to the text":{
		"prefix": "xml_<para>",
		"body": [
			"/// <para>${1:content}</para>"
		],
		"description": "Xml Comment - <para> Is for use inside a tag, such as <summary>, <remarks>, or <returns>, and lets you add structure to the text"
	},
	"Xml Comment - <param> Should be used in the comment for a method declaration to describe one of the parameters for the method":{
		"prefix": "xml_<param>",
		"body": [
			"/// <param name=\"${1:name}\">${2:description}</param>"
		],
		"description": "Xml Comment - <param> Should be used in the comment for a method declaration to describe one of the parameters for the method"
	},
	"Xml Comment - <paramref> Gives you a way to indicate that a word in the code comments, for example in a <summary> or <remarks> block refers to a parameter":{
		"prefix": "xml_<paramref>",
		"body": [
			"/// <paramref name=\"${1:name}\"/>"
		],
		"description": "Xml Comment - <paramref> Gives you a way to indicate that a word in the code comments, for example in a <summary> or <remarks> block refers to a parameter"
	},
	"Xml Comment - <permission> Lets you document the access of a member":{
		"prefix": "xml_<permission>",
		"body": [
			"/// <permission cref=\"${1:member}\">${2:description}</permission>"
		],
		"description": "Xml Comment - <permission> Lets you document the access of a member"
	},
	"Xml Comment - <remarks> Is used to add information about a type, supplementing the information specified with <summary>":{
		"prefix": "xml_<remarks>",
		"body": [
			"/// <remarks>${1:description}</remarks>"
		],
		"description": "Xml Comment - <remarks> Is used to add information about a type, supplementing the information specified with <summary>"
	},
	"Xml Comment - <returns> Should be used in the comment for a method declaration to describe the return value":{
		"prefix": "xml_<returns>",
		"body": [
			"/// <returns>${1:description}</returns>"
		],
		"description": "Xml Comment - <returns> Should be used in the comment for a method declaration to describe the return value"
	},
	"Xml Comment - <see> Lets you specify a link from within text. Use <seealso> to indicate that text should be placed in a See Also section":{
		"prefix": "xml_<see>",
		"body": [
			"/// <see cref=\"${1:member}\"/>"
		],
		"description": "Xml Comment - <see> Lets you specify a link from within text. Use <seealso> to indicate that text should be placed in a See Also section"
	},
	"Xml Comment - <seealso> Lets you specify the text that you might want to appear in a See Also section":{
		"prefix": "xml_<seealso>",
		"body": [
			"/// <seealso cref=\"${1:member}\"/>"
		],
		"description": "Xml Comment - <seealso> Lets you specify the text that you might want to appear in a See Also section"
	},
	"Xml Comment - <summary> Should be used to describe a type or a type member":{
		"prefix": "xml_<summary>",
		"body": [
			"/// <summary>${1:description}</summary>"
		],
		"description": "Xml Comment - <summary> Should be used to describe a type or a type member"
	},
	"Xml Comment - <typeparam> Should be used in the comment for a generic type or method declaration to describe a type parameter":{
		"prefix": "xml_<typeparam>",
		"body": [
			"/// <typeparam name=\"${1:name}\">${2:description}</typeparam>"
		],
		"description": "Xml Comment - <typeparam> Should be used in the comment for a generic type or method declaration to describe a type parameter"
	},
	"Xml Comment - <typeparamref> Enable consumers of the documentation file to format the word in some distinct way, for example in italics":{
		"prefix": "xml_<typeparamref>",
		"body": [
			"/// <typeparamref name=\"${1:name}\"/>"
		],
		"description": "Xml Comment - <typeparamref> Enable consumers of the documentation file to format the word in some distinct way, for example in italics"
	},
	"Xml Comment - <value> Lets you describe the value that a property represents":{
		"prefix": "xml_<value>",
		"body": [
			"/// <value>${1:property-description}</value>"
		],
		"description": "Xml Comment - <value> Lets you describe the value that a property represents"
	},
	"ASP.NET Core 2.0 csproj Generator":{
		"prefix": "dnac_csproj_2.0",
		"body": [
			"<Project Sdk=\"Microsoft.NET.Sdk.Web\">",
			"\t<PropertyGroup>",
			"\t\t<TargetFramework>netcoreapp2.0</TargetFramework>",
			"\t</PropertyGroup>",
			"\t<ItemGroup>",
			"\t\t<Folder Include=\"wwwroot\\\" />",
			"\t</ItemGroup>",
			"\t<ItemGroup>",
			"\t\t<PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />",
			"\t</ItemGroup>",
			"</Project>"
		],
		"description": "ASP.NET Core 2.0 csproj Generator"
	},
	"ASP.NET Core - Creates a HelloWorld sample - Startup":{
		"prefix": "dnac_#helloworld_Startup",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Threading.Tasks;",
			"using Microsoft.AspNetCore.Builder;",
			"using Microsoft.AspNetCore.Hosting;",
			"using Microsoft.AspNetCore.Http;",
			"using Microsoft.Extensions.DependencyInjection;\r\n",
			"namespace WebApp",
			"{",
			"\tpublic class Startup",
			"\t{",
			"\t\tpublic void ConfigureServices(IServiceCollection services)",
			"\t\t{",
			"\t\t}",
			"",
			"\t\tpublic void Configure(IApplicationBuilder app, IHostingEnvironment env)",
			"\t\t{",
			"\t\t\tif (env.IsDevelopment())",
			"\t\t\t{",
			"\t\t\t\tapp.UseDeveloperExceptionPage();",
			"\t\t\t}",
			"",
			"\t\t\tapp.Run(async (context) =>",
			"\t\t\t{",
			"\t\t\t\tawait context.Response.WriteAsync(\"Hello World!\");",
			"\t\t\t});",
			"\t\t}",
			"\t}",
			"}"
			],
		"description": "ASP.NET Core - Creates a HelloWorld sample - Startup"
	},
	"ASP.NET Core - Creates a HelloWorld sample - WebApp":{
		"prefix": "dnac_#helloworld_WebApp",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.IO;",
			"using System.Linq;",
			"using System.Threading.Tasks;",
			"using Microsoft.AspNetCore;",
			"using Microsoft.AspNetCore.Hosting;",
			"using Microsoft.Extensions.Configuration;",
			"using Microsoft.Extensions.Logging;\r\n",
			"namespace WebApp",
			"{",
			"\tpublic class Program",
			"\t{",
			"\t\tpublic static void Main(string[] args)",
			"\t\t{",
			"\t\t\tBuildWebHost(args).Run();",
			"\t\t}",
			"",
			"\t\tpublic static IWebHost BuildWebHost(string[] args) =>",
			"\t\tWebHost.CreateDefaultBuilder(args)",
			"\t\t\t.UseStartup<Startup>()",
			"\t\t\t.Build();",
			"\t}",
			"}"
			],
		"description": "ASP.NET Core - Creates a HelloWorld sample - WebApp"
	},
	"ASP.NET Core - Creates a way to configure the JSON configuration provider":{
		"prefix": "dnac_conf",
		"body": [
			"// Remember imports: using Microsoft.Extensions.Configuration;",
			"public IConfiguration Configuration { get; set; }",
			"",
			"public Startup(IConfiguration configuration)",
			"{",
			"\tConfiguration = configuration;",
			"}"
			],
		"description": "ASP.NET Core - Creates a way to configure the JSON configuration provider"
	},
	"ASP.NET Core - Creates a way to configure the JSON configuration provider with a custom config file":{
		"prefix": "dnac_conf_file",
		"body": [
			"var builder = new ConfigurationBuilder()",
			".SetBasePath(env.ContentRootPath)",
			".AddJsonFile(\"${1:mySettings}.json\", optional: true, reloadOnChange: true);",
			"",
			"// Remember to create the property",
			"// public IConfiguration Configuration { get; set; }",
			"Configuration = builder.Build();"
			],
		"description": "ASP.NET Core - Creates a way to configure the JSON configuration provider with a custom config file"
	},
	"ASP.NET Core - Creates the base of a controller":{
		"prefix": "dnac_controller",
		"body": [
			"namespace ${1:Name}.Controllers",
			"{",
			"",
			"\tusing Microsoft.AspNetCore.Mvc;",
			"",
			"\tpublic class ${2:Name}Controller : Controller",
			"\t{",
			"\t\tpublic IActionResult Index()",
			"\t\t{",
			"\t\t\treturn View();",
			"\t\t}",
			"",
			"\t\tpublic IActionResult ${3:Welcome}()",
			"\t\t{",
			"\t\t\tViewData[\"Message\"] = \"Your welcome message\";",
			"",
			"\t\t\treturn View();",
			"\t\t}",
			"\t}",
			"}"
			],
		"description": "ASP.NET Core - Creates the base of a controller"
	},
	"ASP.NET Core - Creates the Startup constructor to be used with the web hosting environment":{
		"prefix": "dnac_startupenv",
		"body": [
			"public Startup(IHostingEnvironment env)",
			"{",
			"\tvar builder = new ConfigurationBuilder()",
			"\t\t.SetBasePath(env.ContentRootPath)",
			"\t\t.AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)",
			"\t\t.AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)",
			"\t\t.AddEnvironmentVariables();",
			"",
			"\tConfiguration = builder.Build();",
			"}"
			],
		"description": "ASP.NET Core - Creates the Startup constructor to be used with the web hosting environment"
	}
}